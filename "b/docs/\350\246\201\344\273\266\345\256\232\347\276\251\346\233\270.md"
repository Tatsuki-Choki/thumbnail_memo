# サムメモ要件定義書（完全版）

## 1. プロジェクト概要

**プロジェクト名**: サムメモ（Thumbnail Gallery Website）

**目的**: YouTube 動画のサムネイルを収集・管理・表示する Pinterest ライクなギャラリーサイトを構築し、デザインやコンテンツの参考資料として利用できるようにする。

**技術スタック**: Next.js、TypeScript、Tailwind CSS、Supabase、shadcn/ui。

この要件定義書では、サイトの機能要件、非機能要件、ユーザー体験を中心に、今後実装すべき改善点を詳述する。対象読者は開発者、デザイナー、および関係者を想定しており、システム全体の流れを把握できる内容とする。

## 2. 現状の課題

### 2.1 環境設定とセキュリティ

現行バージョンでは Supabase への接続エラーやハードコードされた認証情報が散見される。また、環境変数が不足しており、セキュアな設定が行われていない箇所がある。これらは運用面で重大なリスクとなるため、適切な環境変数の利用と安全な認証方式の実装が急務である。エラーハンドリングも現状は不十分で、ユーザーにとってわかりにくいエラーが表示されることがある。

### 2.2 UI/UX デザイン

現在のサイトは単純なグリッドレイアウトを採用しており、Pinterest ライクなマソンリーレイアウトが実装されていない。インタラクションも限定的で、画像表示が単調である。ユーザーが閲覧しやすい UI/UX を実現するために、遅延読み込みや無限スクロール、ホバーエフェクト、モーダルビュー等の追加が求められる。

### 2.3 レスポンシブデザイン

各ブレークポイントにおけるカラム数やレイアウト調整が十分でなく、特にタブレット向けの最適化が不足している。デスクトップ、タブレット、モバイルそれぞれで滑らかにレイアウトが変化するように設計し直す必要がある。

## 3. 機能要件

### 3.1 フロントエンド機能

1. **マソンリーレイアウト**: コンテナ幅に応じてカラム数を動的に変更するアルゴリズムを実装し、ギャップやアイテムの再配置を滑らかに行う。現在の MasonryGrid コンポーネントでは、コンテナサイズの変更を監視し、各アイテムの位置を計算しているが、よりスムーズなリフローが求められる。
2. **画像表示機能**: `Image` コンポーネントを活用し、遅延読み込み（lazy loading）やプログレッシブ画像読み込みを実装する。エラー時にはフォールバック画像を表示し、ユーザー体験を損なわないようにする。
3. **インタラクション**: ホバー時の情報表示や画像クリックでモーダルを開く機能を実装。将来的にはお気に入り機能を追加し、ユーザーがサムネイルを保存・共有できるようにする。
4. **ナビゲーション**: サイドバーにカテゴリーフィルタリングを実装し、ユーザーが興味のあるカテゴリだけを閲覧できるようにする。検索機能やタグシステムは将来的な拡張項目として計画する。
5. **無限スクロール**: 画像リストが一定数を超えると自動的に次のページを取得し、ユーザーがページ遷移を意識せずコンテンツを閲覧できるようにする。
6. **アニメーション効果**: Framer Motion を利用し、画像表示やモーダル遷移時に自然なアニメーションを追加する。

### 3.2 バックエンド機能

1. **データ管理**: Supabase をデータベースとして利用し、サムネイル情報の取得・保存・更新・削除を行う。キャッシュシステムを検討し、アクセスの多い画像やデータの取得効率を高める。エラーハンドリングはフロントエンドだけでなく、サーバー側でも詳細なログ出力と共にユーザー向けのメッセージを返すようにする。
2. **認証システム**: 管理者用のログイン機能を提供し、Supabase の Auth を利用する。セッション管理やトークン管理を適切に行い、認証情報の漏洩を防ぐ。開発環境では環境変数による簡易認証を用意するが、本番環境では完全に Supabase Auth に移行する。
3. **API 機能**: YouTube API から動画メタデータを取得し、タイトルやサムネイルの URL、再生回数をサーバー側で処理する。画像最適化のために Cloudflare Images などの外部サービス利用も検討する。

## 4. 非機能要件

### 4.1 パフォーマンス

画像の遅延読み込み、サーバー側のキャッシュ、Next.js の ISR（Incremental Static Regeneration）などを活用し、高速な表示を実現する。また、Supabase の Bandwidth を考慮し、不要なデータ転送を減らすための API 設計とキャッシュ戦略を策定する。

### 4.2 セキュリティ

環境変数で管理する認証情報は `.env` ファイルで適切に設定し、Git には含めない。Supabase のサービスロールキーはサーバーのみで使用し、クライアントへ渡さない。パスワードや API キーはすべて環境変数から取得し、ハードコードは厳禁とする。

### 4.3 保守性と拡張性

TypeScript を利用した型安全な実装を徹底し、コンポーネントの再利用性を高める。テストフレームワーク（Jest や Playwright）を導入し、ユニットテストと E2E テストを実施することで、今後の機能追加でも品質を担保する。

### 4.4 レスポンシブデザイン

Tailwind CSS のブレークポイントを活用し、モバイルからデスクトップまで流動的なレイアウトを実現する。モバイルでは 1〜2 カラム、タブレットでは 2〜3 カラム、デスクトップでは 4〜5 カラムを基本とし、ウィンドウ幅に応じて動的に変化させる。MasonryGrid コンポーネントでは、`getGridConfig` 関数でカラム数やギャップを計算しており、ブレークポイントを詳細に調整することで最適な見た目を提供する。

## 5. ユーザーストーリー

1. **一般ユーザー**: サイトにアクセスし、興味のあるカテゴリを選んでサムネイルを閲覧したい。気に入ったサムネイルはモーダルで拡大し、詳細情報を確認できる。将来的にはお気に入り登録や共有機能を利用して、参考になるサムネイルをストックできると嬉しい。
2. **管理者**: 管理画面にログインし、新規サムネイルの登録、既存サムネイルの編集、不要なサムネイルの削除が行える。YouTube の動画 URL を入力すると自動でサムネイルとメタデータが取得され、手間なく登録できる。

## 6. データベース設計

Supabase のテーブル定義は次の通り。`thumbnails` テーブルにはタイトル、画像 URL、カテゴリー、視聴回数、本文などを保持し、`admins` テーブルには管理者の ID とメールアドレスを保存する。`created_at`、`updated_at` カラムで時系列管理を行う。

```sql
CREATE TABLE thumbnails (
  id SERIAL PRIMARY KEY,
  title TEXT NOT NULL,
  image_url TEXT NOT NULL,
  category TEXT NOT NULL,
  content TEXT,
  views INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE admins (
  id UUID PRIMARY KEY,
  email TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

このテーブルをベースに、Supabase の Row Level Security（RLS）を設定し、一般ユーザーは読み取りのみ、管理者は読み書きできるようにする。また、必要に応じてインデックスや外部キーを追加し、パフォーマンスを高める。

## 7. API 設計

### 7.1 YouTube データ取得 API

`/api/youtube` では YouTube 動画の URL をクエリとして受け取り、動画 ID を抽出して Google API から情報を取得する。エラーハンドリングを強化し、無効な URL や API キー未設定時にはわかりやすいメッセージを返す。以下はリクエスト例とレスポンス例。

```
GET /api/youtube?url=https://www.youtube.com/watch?v=dQw4w9WgXcQ
```

レスポンス

```
{
  "title": "サンプル動画",
  "imageUrl": "https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg",
  "viewCount": "12345"
}
```

### 7.2 サムネイル CRUD API（将来実装）

- **GET /api/thumbnails**: サムネイル一覧取得。カテゴリやキーワードで絞り込みが可能。
- **POST /api/thumbnails**: 新規サムネイル登録。管理者のみ利用可能。
- **PUT /api/thumbnails/{id}**: サムネイル更新。管理者のみ利用可能。
- **DELETE /api/thumbnails/{id}**: サムネイル削除。管理者のみ利用可能。

## 8. 画面設計

### 8.1 トップページ

- サイドバーにカテゴリ一覧を表示し、クリックでフィルタリング。
- メインコンテンツにマソンリーレイアウトでサムネイルを表示。スクロール時には自動で次のページを読み込み、無限スクロールを実現。
- 各サムネイルはホバーするとカテゴリや視聴回数をオーバーレイで表示。
- クリックするとモーダルが開き、より詳細な情報やリンクコピー機能を提供。

### 8.2 管理者ログインページ

- メールアドレスとパスワードを入力してログイン。Supabase Auth で認証を行う。
- エラー発生時はトーストやアラートでフィードバックを返す。

### 8.3 管理ダッシュボード（将来実装）

- 新規サムネイルの登録フォーム。YouTube URL を入力すると自動でタイトルと画像を取得。
- サムネイル一覧の編集・削除機能。複数選択や一括操作も検討する。

## 9. UI/UX の詳細

- **カラーリング**: ホワイトとライトグレーを基調とし、アクセントカラーとしてレッドを使用。shadcn/ui のコンポーネントテーマに合わせてカスタマイズする。
- **フォント**: Google Fonts の Inter を採用し、日本語には Noto Sans JP を組み合わせる。本文サイズや見出しサイズは Tailwind CSS で細かく調整する。
- **アニメーション**: 画像ホバー時の拡大、モーダル表示時のフェードイン/アウトなど、Framer Motion を活用して滑らかな動きを実現する。
- **アクセシビリティ**: キーボード操作やスクリーンリーダーへの配慮を行う。モーダルのフォーカストラップや画像の代替テキストを必ず設定する。

## 10. テスト計画

1. **ユニットテスト**: コンポーネント単位の動作確認を行う。特に MasonryGrid のレイアウト計算や ImageModal の表示制御を重点的にテストする。
2. **E2E テスト**: Playwright でユーザーの画面操作を再現し、ログイン〜サムネイル閲覧までの一連の流れを自動化する。本番環境に近い形でテストすることで、デプロイ後のトラブルを防ぐ。
3. **負荷テスト**: 大量の画像データを扱う際のパフォーマンスを計測し、適切なキャッシュや画像圧縮手法を導入する。

## 11. デプロイと運用

- **デプロイ先**: Vercel を利用し、GitHub 連携による自動デプロイを行う。Supabase 側でもデータベースとストレージのバックアップを定期的に取得する。
- **環境変数管理**: `.env` ファイルと Vercel の環境変数設定を使い分け、漏洩を防止する。開発用と本番用で値を分け、レビュー環境にも対応できるようにする。
- **監視**: Supabase のログや Vercel のアクセスログを活用し、エラーや遅延を素早く検知する。必要に応じて外部の監視ツールを導入する。

## 12. まとめと今後の展望

サムメモは、YouTube 動画のサムネイルを効率的に集め、アイデアの着想やデザイン参考として活用できるプラットフォームを目指す。現在の課題として環境変数の適切な設定、セキュアな認証、UI/UX の改善が挙げられるが、本要件定義書に沿って開発を進めることで、ユーザーにとって快適で安全なサービスを提供できる。

将来的には、検索機能やタグシステム、お気に入り機能の追加など、コミュニティ要素を強化し、ユーザー同士でサムネイルを共有・評価し合える仕組みを構築したい。また、クリエイター向けに自動サムネイル生成やデザインテンプレートの提供など、周辺機能の拡充も検討する。

以上が、サムメモの要件定義書（完全版）である。これらの方針をもとに、約 2000 語相当の内容をまとめた。今後の開発や運用において、本書が指針となり、より良いサービスへと発展することを期待する。
